{
    "Test react component rendering": {
        "prefix": "!tcr",
        "body": [
            "import { screen, render } from'@testing-library/react'",
            "import ${1:ComponentName} from ''",
            "describe(${1:ComponentName}.name, () => {",
            "   beforeEach(() => {",
            "       //TODO",
            "   })",
            "   test(('Should ...'), () => {",
            "       render(<${1:ComponentName}/>)",
            "       expect(screen.).toBeInTheDocument()",
            "   })",
            "})"
        ],
        "description": "Declares a simple test that renders your component"
    },
    "Test react component rendering with context provider": {
        "prefix": "!tcrcp",
        "body": [
            "import { screen, render } from'@testing-library/react'",
            "import ${1:ComponentName} from ''",
            "import ${2:ProviderName} from ''",
            "describe(${1:ComponentName}.name, () => {",
            "   beforeEach(() => {",
            "       //TODO",
            "       initialState = {}",
            "   })",
            "   test(('Should ...'), () => {",
            "       render(",
            "           <${2:Provider} value={initialState}>",
            "               <${1:ComponentName}/>",
            "           </${2:Provider}>",
            "       )",
            "       expect(screen.).toBeInTheDocument()",
            "   })",
            "})"
        ]
    },
    "Test react component rendering with redux provider": {
        "prefix": "!tcrrp",
        "body": [
            "import { screen, render } from'@testing-library/react'",
            "import { Provider } from 'react-redux';",
            "import { createReduxStore } from 'path_to_your_redux_store/store';",
            "import ${1:ComponentName} from ''",
            "describe(${1:ComponentName}.name, () => {",
            "   beforeEach(() => {",
            "       //TODO",
            "       initialState = {}",
            "   })",
            "   test(('Should ...'), () => {",
            "       render(",
            "           <Provider store={createReduxStore(initialState)}>",
            "               <${1:ComponentName}/>",
            "           </Provider>",
            "       )",
            "       expect(screen.).toBeInTheDocument()",
            "   })",
            "})"
        ]
    },
}